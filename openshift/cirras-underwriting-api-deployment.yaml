apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: '#{NAMESPACE}#'
  name: cirras-underwriting-api-deployment-#{ENV}#
  annotations: {}
spec:
  selector:
    matchLabels:
      app: cirras-underwriting-api-#{ENV}#
  replicas: 1
  template:
    metadata:
      labels:
        app: cirras-underwriting-api-#{ENV}#
        project: brmb-pim-#{ENV}#
      annotations:
        # 1. Vault injector configuration goes here, inside the template.
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/agent-inject-token: 'false' # set to 'true' if you are going to connect and query vault from your application
        vault.hashicorp.com/agent-pre-populate-only: 'true' # this makes sure the secret vault will only change during pod restart
        vault.hashicorp.com/auth-path: auth/k8s-silver  # Must match cluster. Use one of: k8s-silver, k8s-gold, k8s-golddr, k8s-emerald
        vault.hashicorp.com/namespace: platform-services
        vault.hashicorp.com/role: a12541-nonprod  # licenseplate-nonprod or licenseplate-prod are your options
        # TODO MH: 
        # replace a12541 with a variable from openshift-deploy.yaml
        # ALL occurences of nonprod needs to be 'prod' for prod deployments and nonprod for all others. Maybe use variable from openshift-deploy.yaml?

        # Configure how to retrieve and populate the secrets from Vault:
        # - The name of the secret is any unique string after vault.hashicorp.com/agent-inject-secret-<name>
        # - The value is the path in Vault where the secret is located.
        vault.hashicorp.com/agent-inject-secret-env: a12541-nonprod/data/#{ENV}#/secrets #TODO MH: Maybe without data/
        # - The template Vault Agent should use for rendering a secret:
        vault.hashicorp.com/agent-inject-template-env: |
          {{- with secret "a12541-nonprod/data/#{ENV}#/secrets" }} 
          {{- range $k, $v := .Data.data }}
          {{ $k }}={{ $v }}{{ end -}}
          {{- end  }}
    spec:
      serviceAccountName: a12541-vault
      containers:
        - name: container
          image: '#{IMAGE_BY_DIGEST}#'
          command:
            ['sh', '-c']
          args:
            ['source /vault/secrets/env && catalina.sh']
          imagePullPolicy: Always
          ports:
            - containerPort: #{TOMCAT_PORT}#
              protocol: TCP
          env:
            - name: TOMCAT_PORT
              valueFrom: 
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: TOMCAT_PORT
            - name: TOMCAT_MAX_THREADS
              valueFrom: 
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: TOMCAT_MAX_THREADS
            - name: CONNECTION_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: CONNECTION_TIMEOUT

            - name: WEBADE_GET_TOKEN_URL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: WEBADE_GET_TOKEN_URL
            - name: WEBADE_CHECK_TOKEN_URL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: WEBADE_CHECK_TOKEN_URL
            - name: WEBADE_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: WEBADE_USERNAME
            - name: WEBADE_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: WEBADE_PASSWORD
            - name: WEBADE_MAXACTIVE
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: WEBADE_MAXACTIVE
            - name: WEBADE_OAUTH2_AUTHORIZE_URL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: WEBADE_OAUTH2_AUTHORIZE_URL
            - name: POSTGRES_RESOURCE_NAME
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: POSTGRES_RESOURCE_NAME
            - name: POSTGRES_URL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: POSTGRES_URL
            - name: POSTGRES_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: POSTGRES_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_MAXACTIVE
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: POSTGRES_MAXACTIVE
            - name: CIRRAS_UNDERWRITING_REST_CLIENT_ID
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: CIRRAS_UNDERWRITING_REST_CLIENT_ID
            - name: CIRRAS_UNDERWRITING_REST_SECRET
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: CIRRAS_UNDERWRITING_REST_SECRET
            - name: CIRRAS_POLICIES_API_URL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: CIRRAS_POLICIES_API_URL
            - name: JASPER_URL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: JASPER_URL
            - name: JASPER_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: JASPER_USERNAME
            - name: JASPER_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: JASPER_PASSWORD
            - name: TZ
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: TIME_ZONE
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-api-config-#{ENV}#
                  key: LOG_LEVEL
          resources:
            requests:
              cpu: #{API_CPU_REQUEST}#
              memory: #{API_MEMORY_REQUEST}#
            limits:
              cpu: #{API_CPU_LIMIT}#
              memory: #{API_MEMORY_LIMIT}#
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  paused: false
