apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: '#{NAMESPACE}#'
  name: 'cirras-underwriting-ui-deployment-#{ENV}#'
spec:
  selector:
    matchLabels:
      app: cirras-underwriting-ui-#{ENV}#
  replicas: 2
  template:
    metadata:
      labels:
        app: cirras-underwriting-ui-#{ENV}#
        project: brmb-pim-#{ENV}#
      annotations:
        # 1. Vault injector configuration goes here, inside the template.
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/agent-inject-token: 'false' # set to 'true' if you are going to connect and query vault from your application
        vault.hashicorp.com/agent-pre-populate-only: 'true' # this makes sure the secret vault will only change during pod restart
        vault.hashicorp.com/auth-path: auth/k8s-silver  # Must match cluster. Use one of: k8s-silver, k8s-gold, k8s-golddr, k8s-emerald
        vault.hashicorp.com/namespace: platform-services
        vault.hashicorp.com/role: #{LICENSE_PLATE}#-#{VAULT_RESOURCE}#  # licenseplate-nonprod or licenseplate-prod are your options
        # Configure how to retrieve and populate the secrets from Vault:
        # - The name of the secret is any unique string after vault.hashicorp.com/agent-inject-secret-<name>
        # - The value is the path in Vault where the secret is located.
        vault.hashicorp.com/agent-inject-secret-env: #{LICENSE_PLATE}#-#{VAULT_RESOURCE}#/data/#{ENV}#/secrets
        # - The template Vault Agent should use for rendering a secret:
        vault.hashicorp.com/agent-inject-template-env: |
          {{- with secret "#{LICENSE_PLATE}#-#{VAULT_RESOURCE}#/data/#{ENV}#/secrets" }}
            export WEBADE_CIRRAS_UNDERWRITING_UI_SECRET="{{ .Data.data.WEBADE_CIRRAS_UNDERWRITING_UI_SECRET }}"
          {{- end }}          
    spec:
      serviceAccountName: #{LICENSE_PLATE}#-vault
      containers:
        - name: container
          image: '#{IMAGE_BY_DIGEST}#'
          imagePullPolicy: Always
          command:
            ['sh', '-c']
          args:
            ['. /vault/secrets/env && catalina.sh run']
          ports:
            - containerPort: #{TOMCAT_PORT}#
              protocol: TCP
          env:
            - name: TOMCAT_PORT
              valueFrom: 
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: TOMCAT_PORT
            - name: TOMCAT_MAX_THREADS
              valueFrom: 
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: TOMCAT_MAX_THREADS
            - name: CONNECTION_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: CONNECTION_TIMEOUT
            - name: BASE_URL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: BASE_URL
            - name: WEBADE_GET_TOKEN_URL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: WEBADE_GET_TOKEN_URL
            - name: CIRRAS_UNDERWRITING_REST_URI
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: CIRRAS_UNDERWRITING_REST_URI
            - name: GRAIN_VERIFIED_YIELD_CALCULATOR_URI
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: GRAIN_VERIFIED_YIELD_CALCULATOR_URI
            - name: FORAGE_VERIFIED_YIELD_CALCULATOR_URI
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: FORAGE_VERIFIED_YIELD_CALCULATOR_URI
            - name: WEBADE_OAUTH2_AUTHORIZE_URL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: WEBADE_OAUTH2_AUTHORIZE_URL
            - name: WEBADE_OAUTH2_ENABLE_CHECKTOKEN
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: WEBADE_OAUTH2_ENABLE_CHECKTOKEN
            - name: LOCAL_CHECKTOKEN_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: LOCAL_CHECKTOKEN_ENDPOINT
            - name: WEBADE_CHECK_TOKEN_URL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: WEBADE_CHECK_TOKEN_URL
            - name: WEBADE_OAUTH2_SITEMINDER_URL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: WEBADE_OAUTH2_SITEMINDER_URL
            - name: WEBADE_GET_TOKEN_URL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: WEBADE_GET_TOKEN_URL
            - name: WEBADE_OAUTH2_SCOPES
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: WEBADE_OAUTH2_SCOPES
            - name: WEBADE_OAUTH2_SITEMINDER_URL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: WEBADE_OAUTH2_SITEMINDER_URL
            - name: ACTIVE_PORT
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: ACTIVE_PORT
            - name: WEB_PATH
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: WEB_PATH
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: cirras-underwriting-ui-config-#{ENV}#
                  key: LOG_LEVEL
            - name: APPLICATION_ENVIRONMENT_NAME      
              value: #{ENV}#
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /pub/cirras-underwriting/
              port: #{TOMCAT_PORT}#
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 2
          resources:
            requests:
              cpu: 50m
              memory: 200Mi
            limits:
              cpu: 150m
              memory: 400Mi 
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
