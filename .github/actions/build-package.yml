name: build package

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      MICROSERVICE_NAME:
        required: true
        type: string
      VERSION_NUMBER:
        required: true
        type: string

env:
  DIRECTORY_SUFFIX: ${{ contains(inputs.MICROSERVICE_NAME, '-api') && '-rest-endpoints' || '' }}


jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.ENVIRONMENT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          
      - name: Build with Maven
        run: |
          export MAVEN_OPTS="-Xmx3072m -XX:MaxMetaspaceSize=512m"
          export NODE_OPTIONS="--max-old-space-size=4096"
          mvn --settings ${{ inputs.MICROSERVICE_NAME }}/deploy-tools/settings.xml --batch-mode --update-snapshots -f ${{ inputs.MICROSERVICE_NAME }}/pom.xml -Drepo.login=${{ secrets.IDIR_AS_EMAIL }} -Drepo.password=${{ secrets.IDIR_PASSWORD }} package

      - name: Copy files to neccessary folders
        run: mkdir staging && cp ${{ inputs.MICROSERVICE_NAME }}/${{ inputs.MICROSERVICE_NAME }}${{ DIRECTORY_SUFFIX }}/target/*.war staging

      - uses: actions/upload-artifact@v3
        with:
          name: Package-${{ inputs.MICROSERVICE_NAME }}
          path: staging

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: staging
          key: ${{ runner.os }}-maven-${{ hashFiles('**war.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

  docker:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          name: Package-${{ inputs.MICROSERVICE_NAME }}
          path: .

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: ${{ github.event.pull_request.number > 0 || inputs.IS_HOTFIX == 'true' }}
        id: meta_pr
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.REGISTRY}}/${{ inputs.MICROSERVICE_NAME }}${{ inputs.IS_HOTFIX == 'true' && '-hotfix' || '' }}
          tags: |
            type=schedule
            type=raw,value=${{ github.base_ref }}
            type=ref,event=tag
            type=raw,value=${{ inputs.IS_HOTFIX == 'true' && format('hotfix-{0}', inputs.BRANCH) || format( 'pr-{0}', github.event.pull_request.number) }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ inputs.VERSION_NUMBER }}

      # NOTE: We store built images in ghcr.io, but use artifactory as a pull-through repository - artifacts.developer.gov.bc.ca/github-docker-remote/bcgov